---
title: "Middleman: Strony statyczne na przykładzie dwujęzycznego bloga"
description: "- Hostuj swoją stronę za darmo, nie martwiąc się o efekt wykopu i błędy programistyczne"
date: 2013-10-08 14:52 UTC
tags: ruby, middleman
blog: pl
lang: pl
---

* list
{:toc}


## Dlaczego statycznie?
Można by zapytać po co w erze Ruby on Rails, Django i Wordpressa bawić się stronami statycznymi, ale można też zapytać po co zaprzęgać bazy danych i płatny hosting by napisać kilka zdań albo zaprezentować firmę, więc może jednak warto się temu przyjrzeć z bliska:

### Zalety

* **Prędkość**. Nic nie jest szybciej ładowane od czystego HTMLa. Robienie stron w ten sposób (a blogów w szczególności) uodparnia nas na *efekt wykopu* dosyć skutecznie.
* **Prostota**. Pełna kontrola nad tym co się dzieje, nie musimy się przedzierać przez cudzy (czasami nienajlepszy) kod by osiągnąć to co chcemy. Nie trzeba się martwić czy nasz kod "wewnętrzny" jest zoptymalizowany, ma tylko działać.
* **Bezpieczeństwo**. Żadnego XSS, przechwytywania sesji, SQL injection, bugów w GEMach i innych. Mamy spokój.
* **Hosting**. Możemy hostować taką stronę gdzie chcemy, od [Github Pages](http://pages.github.com/) i Dropboxa przez darmowe hostingi, [RassberyPi](https://mug.im/blog/2013/01/20/how-to-deploy-octopress-on-a-raspberrypi/) po [TOR](https://www.torproject.org)a.
* **Łatwy backup**. Wszystko, od kodu po dane można trzymać na Githubie/Bitbuckecie/Dropboxie i przenieść stronę z serwera na serwer w minutę.
* **Ulubiony edytor zamiast wymuszonych WYSIWYGów**. Nie wiem jak wy, ale wole dodawać treść Vimem w markdownie, offline, niż się bawić w przeglądarki, ewentualnie w *kopiuj-wklej*.
* **Własne skrypty**. Z czasem możemy sobie stworzyć zestaw skryptów w dowolnym języku programowania i jeszcze bardziej ułatwić sobie pracę.
* **Utylizacja usług zewnętrznych**. Istnieje wiele gotowych zewnętrznych komponentów które możemy wykorzystać. [Disqus](http://disqus.com/) tu jest dobrym przykładem: sami zrobimy to samo najwyżej równie dobrze, częściej gorzej.

### Wady
* **Brak interakcji z użytkownikiem**. Po za JavaScriptem z ciastkami i Local Storage i wszystkimi zewnętrznymi gotowcami których poszukamy w internecie (albo napiszemy sami) niewiele tu jesteśmy w stanie zdziałać.
* **Brak zaawansowanej wyszukiwarki**. Po za gotowcem od Google z wyszukiwarką będzie ciężko. szczególnie, jeśli mamy dużo (1000+) treści, pozostają nam tylko frontendowe rozwiązania, a nie wszędzie się one sprawdzą.
* **Bardzo kłopotliwe przy dużej ilości treści i częstych zmianach**. Przegenerowanie paru milionów stron trochę trwa a uploadowanie gigabajtów za każdym razem gdy trochę zmienimy wygląd to jakaś pomyłka.


## Ale jak to tak? HTML? Ręcznie?!
**Nie**. Nikt oczywiście nie będzie pisał HTMLa samemu. Zmiana w wyglądzie była by zabawą na cały dzień albo i dłużej, nie wspominając o kanałach RSS, Sitemapach itp. Dlatego wymyślono gotowce. Aplikacje w np w Pythonie, Rubym które to ułatwią na tyle, że nie odczujemy tego przeskoku. No i nadal będziemy mogli korzystać ze wszystkich dobrodziejstw *nowego internetu* typu [LESS](http://haml.info/), [HAML](http://haml.info/), [Jinja](http://jinja.pocoo.org/) i co tam sobie wymyślimy.

## Gotowe rozwiązania
W trakcie pisania tej notki istnieje [194](http://staticsitegenerators.net/ "Lista systemów to generowania stron statycznych") systemów to generowania stron statycznych. Z popularniejszych (w miarę sprawnie rozwijanych) można wymienić:

1. [Jekyll](http://jekyllrb.com/) ([Ruby](http://ruby-lang.org))
2. [Octopress](http://octopress.org/) ([Ruby](http://ruby-lang.org))
3. [Pelican](http://getpelican.com/) ([Python](http://www.python.org/))
4. [Hyde](http://hyde.github.io/)  ([Python](http://www.python.org/))
5. [DocPad](http://docpad.org/) ([CoffeeScript](http://coffeescript.org/))
6. **[Middleman](http://middlemanapp.com/)** ([Ruby](http://ruby-lang.org))

W tej notce skupimy się na tym ostatnim. 

## Middleman
Middleman ma solidny system wtyczek, niedużo domyślnych ustawień i wspiera takie technologie jak Coffescript, Sass i HAML na wejściu, bez zbędnego grzebania. Po prostu działa. I tak ma być. 
Zakładając, że używacie Linuksa/OSXa przystępujemy do instalacji.

### Instalacja RVM
Ci którzy jeszcze tego nie zrobili, powinni zainstalować [RVM](https://rvm.io/rvm/install). Nie jest to oczywiście wymagane, ale się przydaje, tak więc: 

~~~
$ \curl -L https://get.rvm.io | bash
$ source ~/.rvm/scripts/rvm
~~~

Sprawdzamy swoją konfigurację...

~~~
$ type rvm | head -n 1
rvm is a function
~~~

... i instalujemy odpowiednią wersję Ruby.

~~~
$ rvm install 1.9.2
~~~

### Instalacja Middlemana
Instalujemy gema:

~~~
$ gem install middleman
$ gem install middleman-blog # opcjonalnie, ale do tego przykładu się przyda.
~~~

Inicjujemy projekt (w założeniu blog).

~~~ shell
$ bundle exec middleman init blog --template=blog
~~~

 `--template` to oczywiście szablon projektu, dostępne są *html5*, *mobile*, *smacss* (*blog* jest dostępny dopiero po instalacji wtyczki). Społeczność udostępniła też [kilka innych](http://directory.middlemanapp.com/#/templates/all).

Przechodzimy do `blog` i zmieniamy wpisy w `Gemfile` by korzystać z najnowszych wersji

~~~ ruby
gem "middleman", git: 'https://github.com/middleman/middleman', branch: "master"
gem "middleman-blog", git: 'https://github.com/epochwolf/middleman-blog', branch: "master"
~~~

Instalujemy pakiety...

~~~ shell
$ bundle install
~~~

...i gotowe. Teraz możemy zobaczyć co mamy:

~~~ shell
$ bundle exec middleman server
== The Middleman is loading
== Locales: en (Default en)
== LiveReload is waiting for a browser to connect
== The Middleman is standing watch at http://0.0.0.0:4567
== Inspect your site configuration at http://0.0.0.0:4567/__middleman/
~~~

Pierwszy adres to nasz blog, drugi to konfiguracja naszej aplikacji:

W przypadku gdy pojawi nam się komunikat typu 

~~~ shell
/home/_USER_/.rvm/gems/ruby-1.9.3-p448/gems/execjs-1.4.0/lib/execjs/runtimes.rb:51:in `autodetect': Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
~~~

Dopisujemy na koniec `Gemfile`'a

~~~ ruby
gem 'execjs'
gem 'therubyracer'
~~~

i wpisujemy `bundle install`

### Gotowe wtyczki
Teraz można przystąpić do konfiguracji, ale zanim to zrobimy przejrzyjmy kilka [wtyczek](http://directory.middlemanapp.com/#/extensions/all) wykorzystanych w tym blogu. 


#### middleman-syntax ( [<i class="icon-external-link"></i>](https://github.com/middleman/middleman-syntax) )
Odpowiada za podświetlanie składni, przez [kramdown](http://kramdown.rubyforge.org) (wykorzystywany tutaj) lub [redcarpet](https://github.com/vmg/redcarpet). Wszystkie ustawienia wpisujemy w `config.rb`, ale o tym później.

~~~ ruby
gem "middleman-syntax", git: 'https://github.com/middleman/middleman-syntax', branch: "master"
~~~~

#### middleman-livereload ( [<i class="icon-external-link"></i>](https://github.com/middleman/middleman-livereload) )
Automatycznie przeładowuje stronę gdy jakiś plik w katalogu projektu się zmieni. Im mniej Alt-Tab tym lepiej.

~~~ ruby
gem "middleman-livereload", "~> 3.1.0"
~~~~

#### middleman-deploy ( [<i class="icon-external-link"></i>](https://github.com/tvaughan/middleman-deploy) )
Automagiczny deploy przez `$ middleman build && middleman deploy`. Wtyczka wspiera *rsync*, *git*, *ftp* i *sftp*. 

~~~ ruby
gem "middleman-deploy"
~~~~

### Konfiguracja
Całą aplikację konfigurujemy przez odpowiednie wpisy w `config.rb`. Jako "samotłumaczący się" przykład niech posłuży plik z konfiguracją tego bloga:

<%= gist '16e76390fdb01811b006' %>

### Layouty i szablony

**Layout** (czyli główny szablon strony, ten z metatagami i linkami do css/js) jest standardowo w `/layouts/layout.html`
Dodatkowo można zignorować layout dla konkretnej strony:

~~~ruby
page '/kw.html' , :layout => false
~~~

lub wybrać inny (tu: layouts/single_layout.haml)

~~~ruby
page '/kw.html', :layout => :single_layout
~~~

Można też tak zrobić dla całej grupy stron, np zaczynającej się od prefixu:

~~~ruby
page "blog/*", :layout => :article_layout
~~~


**Partiale** (czyli te części które includujemy są w `partials`, nazwy standardowo zaczynają się od podkreślenia, czyli `= partial 'partials/commercial_projects'` zainkluduje plik `partials/_commercial_projects.haml` (*.haml gdy używamy HAMLa, może być *.erb, ale nie *.erb.html i *haml.html), a dodanie `:locals => {:zmienna => wartość}` przekaże zmienną.

Katalog z layoutami i partialami jak zwykle konfigurujemy w `config.rb`.

#### Helpery
...czyli funkcje wspomagające w szablonach. Oprócz kilku [gotowych](http://middlemanapp.com/helpers/) (standardowych w Raisach typu `stylesheet_link_tag`) możemy zdefiniować własne. Umieszczamy je w pliku `custom_helpers` w klasie `CustomHelpers` w katalogu `helpers` lub w innym zdefiniowanym w `config.rb` przez `set :helpers_dir, "__KATALOG__"`.

### Dane
Istnieje możliwość zaczytania danych z plików YAML przez wszystkie podstrony w systemie. Pliki te umieszczamy w katalogu `data`. Przykład (plik `data/main.yml`):

~~~ yml
---
author: Łukasz Malik
description: Developers Blog
keywords: "php, python, django, ruby, ruby on rails"
title: malik.pro
~~~

Teraz dane w szablonie będą dostępne przez `data.main` czyli np `data.main.title`.

### Treść
Każdy plik z katalogu `source` będzie przetworzony na HTML. Na Przykład plik `/source/faq.haml.html` będzie przetworzony na `/faq.html`, chyba, że każemy systemowi go zignorować przez odpowiedni wpis w `config.rb` np.

~~~ ruby
ignore "/faq.html"
~~~

Przydatne przy tworzeniu szablonów. 

**Wpisy na blogu** tworzymy przez

~~~ shell
$ bundle exec middleman article "Tytuł artykułu" [-D _data_]
~~~

Co stworzy plik podobny do `/source/_prefix_bloga_/_sciezka_artykułów_/2013-10-08.tytul-artykulu-html.markdown`. `_prefix_bloga_` ustawiamy przez `blog.prefix = '__PREFIX__` a `_sciezka_artykułów_` przez `blog.sources` w `config.rb` w sekcji 

~~~ ruby
activate :blog do |blog|
  ...
end
~~~

Data domyślnie jest dzisiejsza. Wpisy z przyszłą datą nie są publikowane. Przydatne gdy mamy zadanie w cronie budujące stronę co jakiś czas.

Powstały plik markdown będzie mieć podobny nagłówek do tego:

~~~ markdown
---
title: "Middleman: Strony statyczne na przykładzie dwujęzycznego bloga"
description: ""
date: 2013-10-08 14:52 UTC
tags: ruby, middleman
---
~~~

Gdzie `tags` to tagi/kategorie wpisu. Dane te są dostępne przez `current_page.data` możemy tam wpisać wszystko to co się potem może przydać np do szablonów. Dodatkowo można pisać notki np w *.erb, jeżeli będą nam potrzebne funkcje Rubiego, wtedy plik z notką będzie musiał mieć końcówkę **\*.markdown.erb**, dodatkowo należy dopisać odpowiednią opcję do `config.rb`:

~~~ ruby
set :markdown, :layout_engine => :erb, 
~~~

### Budowanie strony
Pliki które będą wysyłane na serwer znajdują się w `/build`. Generujemy to pliki poleceniem

~~~ shell
$ bundle exec middleman build [--clean] [--verbose]
~~~
Możemy te pliki wysłać na nasz serwer ręcznie albo skorzystać z `middleman-deploy`

### Deploy

Po instalacji wtyczki `middleman-deploy` musimy ją aktywować w `config.rb` (u nas to linie 12-20). I tak odpowiednio:

 * `deploy.method` - metoda wysyłania na serwer (po pełną listę patrz paragraf o wtyczce)
 * `deploy.build_before` - Czy budować stornę przed wysyłaniem
 * `deploy.host` - nasz serwer
 * `deploy.path` - ścieżka
 * `deploy.user` - nazwa użytkownika
 * `deploy.port` - port
 * `deploy.clean` - czy usuńąć stare, niepodlinkowane pliki z serwera

Gdy to mamy wpisujemy 

~~~shell
bundle exec middleman deploy --build-before
~~~

... i strona gotowa.

## Dwa blogi i dwa języki w jednej aplikacji 

Teraz coś trochę ambitniejszego. Dwie wersje językowe strony i dwa osobne blogi, jeden angielski i jeden polski, z osobnymi notkami i kategoriami. Wszystko co angielskie będzie pod `/` a wszystko co polskie w `/pl`. Na początek kilka słów o lokalizacji (I18n):

### Dwa języki...
Lokalizować szablony można na dwa sposoby:

1. Przez przeniesienie szablonu do katalogu `/localizable` i tłumaczenie poszczególnych łańcuchów znaków przez `#{t :string}` (tylko szablony, nie layouty, nie partiale).
2. Przez stworzenie osobnego szablonu do odpowiedniej wersji językowej. Na przykład `index.pl.haml.html` gdzie "pl" to *pl* to oczywiście skrót od wersji językowej.

Pliki z tłumaczeniami standardowo są umieszczane w `/locales` np `/locales/pl.yml`. Przykładowa zawartość takiego pliku to np.

~~~yaml
---
pl:
    commercial_projects: "Komercyjne projekty"
    ....
    paths:
        archive: "archiwum"
        categories: "kategorie"
~~~

Gdzie `paths` to tłumaczenie ścieżek (`/pl/kategorie/` zamiast `/pl/categories/`). 
Tak zrobione tłumaczenie będzie dostępne pod */\__JĘZYK\__/*. Odpowiednie prefixy definiujemy w `config.rb` (w naszym przykładzie linia 7). Dodatkowo:

* `:mount_at_root => :en` - domyślny język. Gdy ustawiemy to na `false` każdy język będzie prefixowany.
* `:lang_map => { :en => :en, :pl => :pl }` - Ręcznie zdefiniowane języki (domyślnie system szuka plików w `/locales/`)

### ...i dwa blogi...

By stworzyć dodatkowy blog potrzebujemy najnowsze wersje middlemana i wtyczki middleman-blog (o tym pomyśleliśmy przy zmianie w `Gemfile`). Potrzebujemy aktywować wtyczkę dwa razy pamiętając o rożnych przefixach (`blog.prefix`) i nazwach (`blog.name`).

~~~ ruby
activate :blog do |blog|
  ...
  blog.prefix='pl'
  blog.name='pl'
  ...
end
~~~

Dodatkowo przy dodawaniu notek (*.markdown), szablonie kalendarza (`calendar_template`), tagów (`template`) i strony głównej bloga musimy zadbać o sprecyzowanie o który blog nam chodzi:

~~~ markdown
---
blog: pl
---
~~~

...czyli o podanie nazwy, `pl` w poniższym przykładzie to nie język tylko nazwa bloga.

#### Sztuczka
`#{I18n.locale}` w szablonie wyświetli nam skrót aktualnie załadowanego języka. Przyda się to np do wpisów w metatagach, a w naszym przykładzie do ładowania innych *partiali* dla każdego języka.

### ...jednocześnie.
W naszym przykładzie chcemy jednak by i blog i odpowiednia wersja językowa miały ten sam prefiks, więc nie ma co liczyć na automatyczne przetłumaczenie. Ustaliliśmy prefiks polskiego bloga na `/pl` angielski nie ma prefiksu, więc ścieżka `/pl/2013.html` załaduje **angielską** wersję polskiego bloga a `/pl/pl` zwróci 404, więc musimy wymusić wersję językową dla wszystkich elementów polskiego bloga "ręcznie", a robimy to tak:

Tworzymy dodatkową daną w nagłówkach szablonu i notek...

~~~ markdown
---
lang: pl
---
~~~

...i w kodzie szalbonu ustawiamy odpowiednie locale na podstawie tej danej: 

~~~ruby
(I18n.locale = current_page.data.lang.to_sym) if current_page.data.lang
~~~

Już prawie działa. Pozostała jeszcze kwestia dat i godzin. Również domyślnie wyświetlają się angielskie, szczególnie dotyczy się to *partials*. Tak więc datę wywołujemy przez: 

~~~ruby
I18n.l date, :format => '%e %B %Y'
~~~

Opcjonalnie możemy wrzucić to do helperów. Pozostaje jeszcze kwestia layoutów, które są "nielokalizowalne". Tu po prostu można includować odpowiednie partiale "ręcznie" np przez

~~~haml
= partial 'partials/intro.' + I18n.locale.to_s
~~~

####Dodatkowo
Gdy w configu ustalimy tak jak ja `"tag.(pl|en).html"` i `"calendar.(pl|en).html"` jako szablony tagów kalendarza pamiętajmy by zignorować "czyste" wersje  tych plików w configu inaczej `build` będzie próbował je zbudować, bo są nazwane jak zwykłe "tłumaczone" szablony, a z racji tego ze ustawiliśmy język domyślny, będzie chciał zrobić z *\en\* pliki `calendar.html` i `tag.html` co mu sie nie uda, bo nie ma tam odpowiednich zmiennych. 

~~~ruby
ignore "/tag.html"
ignore "/calendar.html"
ignore "/pl/tag.html"
ignore "/pl/calendar.html"
~~~

Błędy builda są w sumie nieszkodliwe, ale lepiej ich nie mieć, bo miedzy nimi może umknąć prawdziwy błąd.

Jest to trochę zagmatwane, nie mam też pewności czy czegoś nie pominąłem, więc odsyłam do [źródeł](https://github.com/malik-pro/) tego bloga.

## Dodatki

### Komentarze
Jedno słowo: [Disqus](http://disqus.com/). Rejestrujemy się w serwisie, pobieramy odpowiedni JavaScript do wstawienia na stronę i już możemy gromadzić naszą społeczność.

### Wyszukiwarka
Tu też za bardzo nie mamy wyjścia. Zostaje [Google Custom Search](https://www.google.com/cse) lub [Swiftype](https://swiftype.com). Ewentualnie możemy się pokusić o przeszukiwanie Javascriptem JSONa stworzonego z bazy wpisów albo o jakieś [rozwiązanie](https://github.com/reyesr/fullproof) na [Local Storage](http://www.w3schools.com/html/html5_webstorage.asp) ale to już wychodzi po za temat tej notki.

## Podsumowanie
Tak oto niewielkim sumptem zbudowaliśmy bloga. Mi całość zajęła 10h, ale to tylko dlatego, że nie wszystko było udokumentowane. Podobnym sposobem możemy zbudować też inne strony: wizytówkę firmową, katalog pełnometrażówek z Youtube, preclowe zaplecze SEO, statystyki naszego serwera albo aplikację mobilną na [PhoneGapie](https://github.com/pixelsonly/middleman-phonegap). Bez martwienia się o hosting, bezpieczeństwo naszej aplikacji, wydajność i bazy danych. Ogólnie - całkiem nieźle.

Nie jest to oczywiście wszystko co należy o tym systemie wiedzieć, nie było min. o pisaniu własnych rozszerzeń i o co ciekawszym wykorzystaniu Rack Middleware, ale na początek wystarczy. W razie czego odsyłam do dokumentacji projektu.

## Źródła
1. [middlemanapp.com](http://middlemanapp.com) - strona projektu.
2. [Repozytorium](https://github.com/malik-pro/blog) tego bloga.
3. [Repozytorium](https://github.com/DarrenN/darrenknewton.com) darrenknewton.com.
4. [Repozytorium](https://github.com/epochwolf/epochwolf.com) epochwolf.com.
5. [Repozytorium](https://github.com/timurvafin/timurv.ru) timurv.ru.
